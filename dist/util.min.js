/**
 * A tiny utility collection, mainly for assertion and formatting purposes.
 *
 * https://github.com/justlep/neoutil
 *
 * @license MIT
 */
!function(root,factory){"use strict";"function"==typeof define&&define.amd?define([],factory):"object"==typeof module&&"object"==typeof(module||{}).exports?module.exports=factory():root.util=factory()}(this,function(){"use strict";var util,DEFAULT_NUMBER_GROUP_DELIMITER=",",DEFAULT_NUMBER_DECIMALS_DELIMITER=".",NOP=function(){},idsCounter=0,startTimesById={},console="object"==typeof console?console:{log:NOP,error:NOP},throwError=function(assertionArgs,optionalMessageOffset){var messageOffset=optionalMessageOffset||1,messageAndArgumentsArray=Array.prototype.slice.call(assertionArgs,messageOffset),emptySafeMessageAndArgsArray=messageAndArgumentsArray.length?messageAndArgumentsArray:["Assertion failed"],errorMessage=util.formatString.apply(null,emptySafeMessageAndArgsArray);throw console.error(errorMessage),errorMessage},decimalAdjust=function(type,value,exp){return"undefined"==typeof exp||0===+exp?Math[type](value):(value=+value,exp=+exp,isNaN(value)||"number"!=typeof exp||exp%1!==0?NaN:(value=value.toString().split("e"),value=Math[type](+(value[0]+"e"+(value[1]?+value[1]-exp:-exp))),value=value.toString().split("e"),+(value[0]+"e"+(value[1]?+value[1]+exp:exp))))};return util={NOP:NOP,nextId:function(){return++idsCounter},formatString:function(s){for(var out=""+s,i=1,len=arguments.length;i<len;++i)out=out.replace("{}",arguments[i]);return out},formatNumber:function(numberToFormat,decimals,groupDelimiter,commaOrPoint){var groupSize=3,_decimals="number"==typeof decimals?decimals:2,re="\\d(?=(\\d{"+(groupSize||3)+"})+"+(_decimals>0?"\\D":"$")+")",decimalsDelimiter=commaOrPoint||DEFAULT_NUMBER_DECIMALS_DELIMITER,effectiveGroupDelimiter=groupDelimiter||DEFAULT_NUMBER_GROUP_DELIMITER,num=this.round10(numberToFormat,_decimals).toFixed(_decimals);return num.replace(".",decimalsDelimiter).replace(new RegExp(re,"g"),"$&"+effectiveGroupDelimiter)},formatMoney:function(num,groupDelimiter,commaOrPoint){return this.formatNumber(num,2,groupDelimiter,commaOrPoint)},assert:function(expr){expr||throwError(arguments)},assertDefined:function(expr){"undefined"!=typeof expr||throwError(arguments)},assertBoolean:function(expr){"boolean"==typeof expr||throwError(arguments)},assertBooleanOrUndefined:function(expr){"boolean"==typeof expr||"undefined"==typeof expr||throwError(arguments)},assertString:function(expr){"string"==typeof expr||throwError(arguments)},assertNonEmptyString:function(expr){"string"==typeof(!!expr&&expr)||throwError(arguments)},assertStringOrEmpty:function(expr){!expr||"string"==typeof expr||throwError(arguments)},assertNumber:function(expr){"number"==typeof expr||throwError(arguments)},assertNumberInRange:function(expr,min,max){"number"==typeof expr&&expr>=min&&expr<=max||throwError(arguments,3)},assertNumberInRangeOrEmpty:function(expr,min,max){!expr||"number"==typeof expr&&expr>=min&&expr<=max||throwError(arguments,3)},assertFunction:function(expr){"function"==typeof expr||throwError(arguments)},assertFunctionOrEmpty:function(expr){!expr||"function"==typeof expr||throwError(arguments)},assertObject:function(expr){expr&&"object"==typeof expr||throwError(arguments)},assertObjectOrEmpty:function(expr){!expr||"object"==typeof expr||throwError(arguments)},assertArray:function(expr){expr&&expr instanceof Array||throwError(arguments)},assertArrayOrEmpty:function(expr){!expr||expr instanceof Array||throwError(arguments)},assertElement:function(expr){!(!expr||1!==expr.nodeType)||throwError(arguments)},assertObjectHasProperties:function(obj,propertyNames){this.assertObject(obj,arguments[2]||"Given obj parameter is not an object"),(propertyNames||[]).forEach(function(propName){"undefined"==typeof obj[propName]&&(console.error(arguments[2]||"Given object is invalid"),throwError([obj,'Missing property: "{}"']))})},isNumberInRange:function(num,min,max){return"number"==typeof num&&num>=min&&num<=max},startTimer:function(id){this.assert(!!id,"invalid id for util.startTime: ",id),startTimesById[""+id]=+new Date},stopTimer:function(id){var now=+new Date;return now-(startTimesById[""+id]||now+1)},bind:function(fn,context){return function(){return fn.apply(context,arguments)}},round10:function(value,decimals){return decimalAdjust("round",value,-(decimals||0))},floor10:function(value,decimals){return decimalAdjust("floor",value,-(decimals||0))},ceil10:function(value,decimals){return decimalAdjust("ceil",value,-(decimals||0))}}});